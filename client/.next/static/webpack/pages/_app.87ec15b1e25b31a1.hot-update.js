"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/redux/features/grid/gridSlice.js":
/*!**********************************************!*\
  !*** ./src/redux/features/grid/gridSlice.js ***!
  \**********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"clearAllVisited\": function() { return /* binding */ clearAllVisited; },\n/* harmony export */   \"clearWall\": function() { return /* binding */ clearWall; },\n/* harmony export */   \"nodeEnd\": function() { return /* binding */ nodeEnd; },\n/* harmony export */   \"nodeStart\": function() { return /* binding */ nodeStart; },\n/* harmony export */   \"nodeVisited\": function() { return /* binding */ nodeVisited; },\n/* harmony export */   \"nodeWall\": function() { return /* binding */ nodeWall; },\n/* harmony export */   \"nodeWeight\": function() { return /* binding */ nodeWeight; }\n/* harmony export */ });\n/* harmony import */ var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @reduxjs/toolkit */ \"./node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js\");\n\nconst NUM_ROWS = 20;\nconst NUM_COLS = 10;\nfunction createGrid(rows, cols) {\n    // create an empty starting grid of nodes\n    const grid = [];\n    let count = 0;\n    for(let r = 0; r < rows; r++){\n        let row = [];\n        for(let c = 0; c < cols; c++){\n            row.push({\n                id: count,\n                x: r,\n                y: c,\n                start: false,\n                end: false,\n                wall: false,\n                weight: 1,\n                visited: false\n            });\n            count += 1;\n        }\n        grid.push(row);\n    }\n    return grid;\n}\nconst initialState = {\n    grid: createGrid(NUM_COLS, NUM_ROWS),\n    startNode: null,\n    endNode: null\n};\n// this is broken. can't index x y into grid because the elements\n// at x, y are different than then index\n// createSlice uses \"immer\" which lets us write \"immutbale\" code, but its really just making a copy\nconst gridSlice = (0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.createSlice)({\n    name: \"grid\",\n    initialState,\n    reducers: {\n        nodeVisited: {\n            // prepare sends to reducer\n            // can call nodeVisited(x,y)\n            reducer (state, action) {\n                const { x , y  } = action.payload;\n                state.grid[x][y].visited = true;\n            },\n            prepare (x, y) {\n                // x = NUM_ROWS - x - 1; // need to remap because passing index of arrays. nodeStart and end get the right ones from node comp\n                // not good lol\n                return {\n                    payload: {\n                        x,\n                        y\n                    }\n                };\n            }\n        },\n        nodeStart: {\n            reducer (state, action) {\n                // set => True or False.\n                // whether setting or unsetting\n                const { x , y , set  } = action.payload;\n                state.grid[x][y].start = set;\n                if (set) {\n                    state.startNode = state.grid[x][y];\n                } else {\n                    state.startNode = null;\n                }\n            },\n            prepare (x, y, set) {\n                return {\n                    payload: {\n                        x,\n                        y,\n                        set\n                    }\n                };\n            }\n        },\n        nodeEnd: {\n            reducer (state, action) {\n                const { x , y , set  } = action.payload;\n                state.grid[x][y].end = set;\n                if (set) {\n                    state.endNode = state.grid[x][y];\n                } else {\n                    state.endNode = null;\n                }\n            },\n            prepare (x, y, set) {\n                return {\n                    payload: {\n                        x,\n                        y,\n                        set\n                    }\n                };\n            }\n        },\n        nodeWeight: {\n            reducer (state, action) {\n                const { x , y  } = action.payload;\n                state.grid[x][y].end = true;\n            },\n            prepare (x, y, weight) {\n                return {\n                    payload: {\n                        x,\n                        y,\n                        weight\n                    }\n                };\n            }\n        },\n        nodeWall: {\n            reducer (state, action) {\n                const { x , y  } = action.payload;\n                state.grid[x][y].wall = true;\n            },\n            prepare (x, y) {\n                return {\n                    payload: {\n                        x,\n                        y\n                    }\n                };\n            }\n        },\n        clearAllVisited: {\n            reducer (state, action) {\n                state.grid.map((row)=>row.map((node)=>node.visited = false));\n            }\n        },\n        clearWall: {\n            reducer (state, action) {\n                state.grid.map((row)=>row.map((node)=>node.wall = false));\n            }\n        }\n    }\n});\nconst { nodeVisited , nodeStart , nodeEnd , nodeWeight , nodeWall , clearAllVisited , clearWall  } = gridSlice.actions;\n/* harmony default export */ __webpack_exports__[\"default\"] = (gridSlice.reducer);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/redux/features/grid/gridSlice.js\n"));

/***/ })

});